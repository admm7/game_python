import pygame
import sys
import random

# Initialisation de Pygame
pygame.init()

# Paramètres de l'écran
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Jetpack Joyride")

# Chargement des images de fond
background_images = ["fond3.png ", "background.png ", "fond5.jpg", "photo5.jpg", "photo4.jpg"]
current_background_index = 0
background_image = pygame.image.load(background_images[current_background_index])
background_image = pygame.transform.scale(background_image, (screen_width, screen_height))

# Chargement des images des sprites
player_image = pygame.image.load("player.png")
player_image = pygame.transform.scale(player_image, (100, 100))
missile_image = pygame.Surface((20, 10))
missile_image.fill((255, 0, 0))
laser_image = pygame.Surface((10, 30 ))
laser_image.fill((255, 0, 0))
coin_image = pygame.image.load("coin.jpg ")
coin_image = pygame.transform.scale(coin_image, (30, 30))

# Classe pour le joueur
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = player_image
        self.rect = self.image.get_rect()
        self.rect.centerx = 100
        self.rect.centery = screen_height // 2
        self.gravity = 1
        self.score = 0
        self.attack_cooldown = 0

    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE]:
            self.rect.y -= 5
        elif keys[pygame.K_DOWN] and self.attack_cooldown <= 0:
            self.attack_cooldown = 30
            new_missile = Missile(self.rect.centerx, self.rect.bottom + 5, -5)
            missiles.add(new_missile)
            all_sprites.add(new_missile)
        else:
            self.rect.y += self.gravity
            self.gravity += 0.2
            if self.gravity > 5:
                self.gravity = 5
        self.attack_cooldown -= 1

# Classe pour les missiles
class Missile(pygame.sprite.Sprite):
    def __init__(self, x, y, speed):
        super().__init__()
        self.image = missile_image
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.centery = y
        self.speed = speed

    def update(self):
        self.rect.x += self.speed
        if self.rect.right <= 0 or self.rect.left >= screen_width:
            self.kill()

# Classe pour les lasers
class Laser(pygame.sprite.Sprite):
    def __init__(self, x, y, speed):
        super().__init__()
        self.image = laser_image
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.speed = speed

    def update(self):
        self.rect.x -= self.speed
        if self.rect.right <= 0:
            self.rect.x = screen_width
            self.rect.y = random.randint(0, screen_height - 20)

# Classe pour les pièces
class Coin(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = coin_image
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

# Groupe de sprites
all_sprites = pygame.sprite.Group()
player = Player()
all_sprites.add(player)

# Groupe de missiles
missiles = pygame.sprite.Group()

# Groupe de lasers
lasers = pygame.sprite.Group()

# Groupe de pièces
coins = pygame.sprite.Group()

clock = pygame.time.Clock()

# Timer pour changer le fond d'arrière-plan
background_change_timer = 0
background_change_interval = 3000   # en millisecondes

# Boucle principale
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Mise à jour des sprites
    all_sprites.update()

    # Génération aléatoire des missiles
    if random.randint(0, 100) < 1:
        new_missile = Missile(screen_width, random.randint(0, screen_height - 10), 3)
        missiles.add(new_missile)
        all_sprites.add(new_missile)

    # Génération aléatoire des lasers
    if random.randint(0, 100) < 1:
        new_laser = Laser(screen_width, random.randint(0, screen_height - 20), 4)
        lasers.add(new_laser)
        all_sprites.add(new_laser)

    # Génération aléatoire des pièces
    if random.randint(0, 100) < 1:
        new_coin = Coin(screen_width, random.randint(0, screen_height - 30))
        coins.add(new_coin)
        all_sprites.add(new_coin)

    # Vérification des collisions avec les missiles
    if pygame.sprite.spritecollide(player, missiles, False):
        running = False

    # Vérification des collisions avec les lasers
    if pygame.sprite.spritecollide(player, lasers, False):
        running = False

    # Vérification des collisions avec les pièces
    collected_coins = pygame.sprite.spritecollide(player, coins, True)
    player.score += len(collected_coins)

    # Changement du fond d'arrière-plan à intervalles réguliers
    background_change_timer += clock.get_rawtime()
    if background_change_timer >= background_change_interval:
        current_background_index = (current_background_index + 1) % len(background_images)
        background_image = pygame.image.load(background_images[current_background_index])
        background_image = pygame.transform.scale(background_image, (screen_width, screen_height))
        background_change_timer = 0

    # Affichage
    screen.blit(background_image, (0, 0))
    all_sprites.draw(screen)
    pygame.display.flip()

    clock.tick(60)

pygame.quit()
sys.exit()
